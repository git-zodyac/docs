{
  "title": "Dependencies and providers",
  "text": "Zodyac provides a simple dependency injection mechanism, which allows you to manage relationships between modules and their lifecycles.",
  "intro": {
    "title": "Introduction",
    "text": "Zodyac organizes your code into modules and manages their dependencies. You can add dependencies to your module by adding <code class=\"inserted\">@Provide</code> decorator to the constructor:",
    "provide": "This decorator can accept a single module, an array of modules or a list of providers (see below).",
    "root": "<code class=\"inserted\">Application</code> must be the root module of your project. It is the only module that is not added to any other module. You can add dependencies to it by adding modules to your application configuration:",
    "providers": "Learn more about <a href=\"/docs/cli/init\">Providers</a>.",
    "options": {
      "title": "Provider options",
      "text": "There are several options to add a dependency to your module:",
      "direct": "Direct usage",
      "direct-text": "You can use module constructor directly as a dependency:",
      "value": "Using value",
      "value-text": "You can use existing instance as a dependency:",
      "factory": "Factory function",
      "factory-text": "Use a factory (async) function to create a dependency. Factory function is called only once and the result is cached:",
      "class": "Using class",
      "class-text": "You can use a class as a dependency. It will be instantiated automatically:"
    }
  },
  "ref": {
    "title": "Referencing dependencies",
    "text": "You can reference dependencies in your module by calling <code class=\"inserted\">this.require(...)</code> which accepts a constructor of the module you want to reference:",
    "provide": "T The result is "
  }
}
