{
  "title": "Zod Express.js validator",
  "text": "Request&nbsp;validation with&nbsp;Zod for&nbsp;Express.js, which supports body, query and parameters.",
  "install": {
    "title": "Installation",
    "text": "Install the&nbsp;package with&nbsp;npm:"
  },
  "usage": {
    "title": "Usage",
    "text": "Firstly, define your request body schema:",
    "endpoint": "Create an endpoint using <code class=\"inserted\">CheckBody</code> function:",
    "params": "Validating request parameters:",
    "params-text": "You can also parse your request parameters using <code class=\"inserted\">CheckParams</code>:",
    "query": "Validating request query:",
    "query-text": "Parse your request query using <code class=\"inserted\">CheckQuery</code>:",
    "infer": "As you can see, <code class=\"inserted\">req.body</code>, <code class=\"inserted\">req.params</code> and <code class=\"inserted\">req.query</code> are inferring types from your zod schema.",
    "notice": "Please remember that Express params and query parameters are always strings. If you want to parse them to other types, you have to do it manually.",
    "all": "Validating all at once:",
    "all-text": "You can validate all request data at once using <code class=\"inserted\">Check</code>:"
  },
  "errors": {
    "title": "Error handling",
    "text": "If validation fails, <code class=\"inserted\">Check</code>, <code class=\"inserted\">CheckBody</code>, <code class=\"inserted\">CheckParams</code> and <code class=\"inserted\">CheckQuery</code> will automatically send 406 response with error message. If you want to handle errors yourself, you can use <code class=\"inserted\">ValidationOptions</code>:",
    "params": "<code class=\"inserted\">ValidationOptions</code> interface:"
  },
  "middleware": {
    "title": "Middleware",
    "text": "If you prefer to validate your requests aside from your endpoints logic, you can use <code class=\"inserted\">zem.Body</code>, <code class=\"inserted\">zem.Params</code>, <code class=\"inserted\">zem.Query</code> or <code class=\"inserted\">zem.Check</code> middleware:",
    "notice": "Please notice that in this case your <code class=\"inserted\">req.body</code>, <code class=\"inserted\">req.params</code> and <code class=\"inserted\">req.query</code> will be <code class=\"inserted\">any</code>. If you want to use types, you have to specify them manually or use <code class=\"inserted\">CheckBody</code>, <code class=\"inserted\">CheckParams</code>, <code class=\"inserted\">CheckQuery</code> or <code class=\"inserted\">Check</code>."
  },
  "decorators": {
    "title": "Experimental: decorators",
    "text": "You can also use decorators to validate your requests. Just add <code class=\"inserted\">@ValidateBody</code>, <code class=\"inserted\">@ValidateParams</code>, <code class=\"inserted\">@ValidateQuery</code> or <code class=\"inserted\">@Validate</code> to your endpoint function:",
    "notice": "Due to the limitations of TypeScript decorators, you have to specify the type of <code class=\"inserted\">req.body</code> manually."
  }
}
